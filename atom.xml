<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poisoner&#39;s Blog</title>
  
  <subtitle>keep running</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://popwalker.github.io/"/>
  <updated>2018-05-23T07:02:21.732Z</updated>
  <id>https://popwalker.github.io/</id>
  
  <author>
    <name>poisoner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用go-swagger为golang API自动生成swagger文档</title>
    <link href="https://popwalker.github.io/article/6b03ec87/"/>
    <id>https://popwalker.github.io/article/6b03ec87/</id>
    <published>2018-05-23T06:45:33.000Z</published>
    <updated>2018-05-23T07:02:21.732Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/20180523145841.png" alt=""></p><h3 id="什么是swagger？"><a href="#什么是swagger？" class="headerlink" title="什么是swagger？"></a>什么是swagger？</h3><p><a href="https://swagger.io" target="_blank" rel="noopener">Swagger</a>是一个简单但功能强大的API表达工具。它具有地球上最大的API工具生态系统，数以千计的开发人员，使用几乎所有的现代编程语言，都在支持和使用Swagger。使用Swagger生成API，我们可以得到交互式文档，自动生成代码的SDK以及API的发现特性等。</p><h3 id="swagger文档长啥样？"><a href="#swagger文档长啥样？" class="headerlink" title="swagger文档长啥样？"></a>swagger文档长啥样？</h3><p>一个最简单的swagger文档示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">"2.0"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">Simple</span> <span class="string">API</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">A</span> <span class="string">simple</span> <span class="string">API</span> <span class="string">to</span> <span class="string">learn</span> <span class="string">how</span> <span class="string">to</span> <span class="string">write</span> <span class="string">OpenAPI</span> <span class="string">Specification</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">https</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">simple.api</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/openapi101</span></span><br><span class="line"></span><br><span class="line"><span class="attr">paths:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Tips:阅读本文前提是假设你已经了解了如何编写swagger文档，当然，如果还不了解也没关系，可以去<a href="https://swagger.io/docs/specification/2-0/adding-examples/" target="_blank" rel="noopener">swagger官网</a>查看文档进行学习，并且这里还有一套<a href="https://legacy.gitbook.com/book/huangwenchao/swagger/details" target="_blank" rel="noopener">《Swagger从入门到精通》</a>附上.</p></blockquote><h3 id="本文背景介绍"><a href="#本文背景介绍" class="headerlink" title="本文背景介绍"></a>本文背景介绍</h3><p>​        写作本文的原因是因为公司要求api文档都使用 swagger格式，项目是用golang编写的，作为一个懒癌程序员，怎么能够忍受去编写这么复杂的swagger文档呢？有没有一键生成的工具呢？google一下，还真有,那就是<a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a>项目。go-swagger众多特色功能之一就是<a href="https://github.com/go-swagger/go-swagger#generate-a-spec-from-source" target="_blank" rel="noopener">Generate a spec from source</a>,即通过源码生成文档，很符合我的需求。</p><p>下面就简单介绍下如何为项目加上swagger注释，然后一键生成API文档</p><p>开始之前需要安装两个工具：</p><ul><li>swagger-editor:用于编写swagger文档，UI展示，生成代码等…</li><li>go-swagger:用于一键生成API文档</li></ul><p>安装swagger-editor,我这里使用docker运行，其他安装方式，请查看<a href="https://swagger.io/docs/swagger-tools/#swagger-editor" target="_blank" rel="noopener">官方文档</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull swaggerapi/swagger-editor</span><br><span class="line">docker run --rm -p 80:8080 swaggerapi/swagger-editor</span><br></pre></td></tr></table></figure><p>安装go-swagger,我这边使用brew安装，其他安装方式，请查看<a href="https://goswagger.io/#installing" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap go-swagger/go-swagger</span><br><span class="line">brew install go-swagger</span><br></pre></td></tr></table></figure><p>好了，现在终于开始正题：start coding!!!</p><h3 id="开始编写注释"><a href="#开始编写注释" class="headerlink" title="开始编写注释"></a>开始编写注释</h3><p>1.假设有一个user.server，提供一些REST API，用于对用户数据的增删改查。</p><p>比如这里有一个<code>getOneUser</code>接口，是查询用户信息的：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"user.server/models"</span></span><br><span class="line">    <span class="string">"crypto/md5"</span></span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"github.com/Sirupsen/logrus"</span></span><br><span class="line">    <span class="string">"github.com/gorilla/mux"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetUserParam <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int</span> <span class="string">`json:"id"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetOneUser</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">    decoder := json.NewDecoder(r.Body)</span><br><span class="line">    <span class="keyword">var</span> param GetUserParam</span><br><span class="line">    err := decoder.Decode(&amp;param)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"request param is invalid, please check!"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get user from db</span></span><br><span class="line">    user, err := models.GetOne(strconv.Itoa(param.Id))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logrus.Warn(err)</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"failed"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    WriteResponse(w, SuccessResponseCode, <span class="string">"success"</span>, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据swagger文档规范，一个swagger文档首先要有swagger的版本和info信息。利用go-swagger只需要在声明package之前加上如下注释即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Package classification User API.</span><br><span class="line">//</span><br><span class="line">// The purpose of this service is to provide an application</span><br><span class="line">// that is using plain go code to define an API</span><br><span class="line">//</span><br><span class="line">//      Host: localhost</span><br><span class="line">//      Version: 0.0.1</span><br><span class="line">//</span><br><span class="line">// swagger:meta</span><br><span class="line">package service</span><br></pre></td></tr></table></figure><p>然后在项目根目录下使用<code>swagger generate spec -o ./swagger.json</code>命令生成<code>swagger.json</code>文件：</p><blockquote><p>此命令会找到main.go入口文件，然后遍历所有源码文件，解析然后生成swagger.json文件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"swagger"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">  <span class="attr">"info"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"The purpose of this service is to provide an application\nthat is using plain go code to define an API"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"User API."</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">  <span class="attr">"paths"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.基本信息有了，然后就要有路由，请求，响应等，下面针对getOneUser接口编写swagger注释：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swagger:parameters getSingleUser</span></span><br><span class="line"><span class="keyword">type</span> GetUserParam <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// an id of user info</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Required: true</span></span><br><span class="line">    <span class="comment">// in: path</span></span><br><span class="line">    Id <span class="keyword">int</span> <span class="string">`json:"id"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetOneUser</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// swagger:route GET /users/&#123;id&#125; users getSingleUser</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// get a user by userID</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This will show a user info</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     Responses:</span></span><br><span class="line">    <span class="comment">//       200: UserResponse</span></span><br><span class="line">    decoder := json.NewDecoder(r.Body)</span><br><span class="line">    <span class="keyword">var</span> param GetUserParam</span><br><span class="line">    err := decoder.Decode(&amp;param)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"request param is invalid, please check!"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get user from db</span></span><br><span class="line">    user, err := models.GetOne(strconv.Itoa(param.Id))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logrus.Warn(err)</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"failed"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    WriteResponse(w, SuccessResponseCode, <span class="string">"success"</span>, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在<code>GetUserParam</code>结构体上面加了一行<code>swagger:parameters getSingleUser</code>的注释信息，这是声明接口的入参注释，结构体内部的几行注释指明了id这个参数必填，并且查询参数id是在url path中。详细用法，参考:<a href="https://goswagger.io/generate/spec/params.html" target="_blank" rel="noopener"> swagger:params</a></p><p>在<code>GetOneUser</code>函数中：</p><ul><li><code>swagger:route</code>指明使用的http method，路由，以及标签和operation id,详细用法，参考：<a href="https://goswagger.io/generate/spec/route.html" target="_blank" rel="noopener"> swagger:route</a></li><li><code>Responses</code>指明了返回值的code以及类型</li></ul><p>然后再声明响应:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User Info</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// swagger:response UserResponse</span></span><br><span class="line"><span class="keyword">type</span> UserWapper <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// in: body</span></span><br><span class="line">    Body ResponseMessage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResponseMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">    Code    <span class="keyword">int</span>         <span class="string">`json:"code"`</span></span><br><span class="line">    Message <span class="keyword">string</span>      <span class="string">`json:"message"`</span></span><br><span class="line">    Data    <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"data"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>swagger:response</code>语法声明返回值，其上两行是返回值的描述（我也不清楚，为啥描述信息要写在上面，欢迎解惑）,详细用法，参考；<a href="https://goswagger.io/generate/spec/response.html" target="_blank" rel="noopener"> swagger:response</a></p><p>然后浏览器访问<code>localhost</code>,查看swagger-editor界面,点击工具栏中的<code>File-&gt;Impoprt File</code>上传刚才生成的 <code>swagger.json</code>文件，就可以看到界面：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/20180523144258.png" alt=""></p><p>这样一个简单的api文档就生成了</p><p>3.怎么样？是不是很简单？可是又感觉那里不对，嗯，注释都写在代码里了，很不美观，而且不易维护。想一下go-swagger的原理是扫描目录下的所有go文件，解析注释信息。那么是不是可以把api注释都集中写在单个文件内，统一管理，免得分散在各个源码文件内。</p><p>新建一个<code>doc.go</code>文件，这里还有一个接口是<code>UpdateUser</code>,那么我们在doc.go文件中声明此接口的api注释。先看一下<code>UpdateUser</code>接口的代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateUser</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">    <span class="comment">// decode body data into user struct</span></span><br><span class="line">    decoder := json.NewDecoder(r.Body)</span><br><span class="line">    user := models.User&#123;&#125;</span><br><span class="line">    err := decoder.Decode(&amp;user)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"user data is invalid, please check!"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if user exists</span></span><br><span class="line">    data, err := models.GetUserById(user.Id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logrus.Warn(err)</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"query user failed"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> data.Id == <span class="number">0</span> &#123;</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"user not exists, no need to update"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update</span></span><br><span class="line">    _, err = models.Update(user)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        WriteResponse(w, ErrorResponseCode, <span class="string">"update user data failed, please try again!"</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    WriteResponse(w, SuccessResponseCode, <span class="string">"update user data success!"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再doc.go文件中编写如下声明：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"user.server/models"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// swagger:parameters UpdateUserResponseWrapper</span></span><br><span class="line"><span class="keyword">type</span> UpdateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// in: body</span></span><br><span class="line">    Body models.User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update User Info</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// swagger:response UpdateUserResponseWrapper</span></span><br><span class="line"><span class="keyword">type</span> UpdateUserResponseWrapper <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// in: body</span></span><br><span class="line">    Body ResponseMessage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swagger:route POST /users users UpdateUserResponseWrapper</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Update User</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This will update user info</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     Responses:</span></span><br><span class="line"><span class="comment">//       200: UpdateUserResponseWrapper</span></span><br></pre></td></tr></table></figure><p>这样就把api声明注释给抽离出来了，然后使用命令<code>swagger generate spec -o ./swagger.json</code>生成json文件,就可以看到这样的结果：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/20180523144340.png" alt=""></p><p>很简单吧，参照文档编写几行注释，然后一个命令生成API文档。懒癌程序员福音~</p><p>本文所有示例代码托管在<a href="https://bitbucket.org/rick-chang/user.service/src/master/" target="_blank" rel="noopener">这里</a></p><p>参考：</p><ul><li><a href="https://swagger.io/docs/swagger-tools/" target="_blank" rel="noopener">swagger官方Doc</a></li><li><a href="https://legacy.gitbook.com/book/huangwenchao/swagger/details" target="_blank" rel="noopener">Swagger从入门到精通</a></li><li><a href="https://goswagger.io/" target="_blank" rel="noopener">go-swagger文档</a></li><li><a href="https://github.com/go-swagger/go-swagger/" target="_blank" rel="noopener">go-swagger的github主页</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/20180523145841.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是swagger？&quot;&gt;&lt;a href=&quot;#什么是swagger？&quot; class=&quot;headerlink&quot; title=&quot;什么是swagger？&quot;&gt;&lt;/a&gt;什么是swagger？&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://swagger.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swagger&lt;/a&gt;是一个简单但功能强大的API表达工具。它具有地球上最大的API工具生态系统，数以千计的开发人员，使用几乎所有的现代编程语言，都在支持和使用Swagger。使用Swagger生成API，我们可以得到交互式文档，自动生成代码的SDK以及API的发现特性等。&lt;/p&gt;
&lt;h3 id=&quot;swagger文档长啥样？&quot;&gt;&lt;a href=&quot;#swagger文档长啥样？&quot; class=&quot;headerlink&quot; title=&quot;swagger文档长啥样？&quot;&gt;&lt;/a&gt;swagger文档长啥样？&lt;/h3&gt;&lt;p&gt;一个最简单的swagger文档示例：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;swagger:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;info:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  title:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Simple&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;API&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  description:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;simple&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;learn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;how&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;OpenAPI&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Specification&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;schemes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;simple.api&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;basePath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/openapi101&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;paths:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://popwalker.github.io/tags/golang/"/>
    
      <category term="swagger" scheme="https://popwalker.github.io/tags/swagger/"/>
    
      <category term="go-swagger" scheme="https://popwalker.github.io/tags/go-swagger/"/>
    
  </entry>
  
  <entry>
    <title>使用automator上传图片到腾讯云</title>
    <link href="https://popwalker.github.io/article/38b3f2da/"/>
    <id>https://popwalker.github.io/article/38b3f2da/</id>
    <published>2018-05-08T03:33:57.000Z</published>
    <updated>2018-05-09T01:49:11.048Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/53967ec46e216.jpg" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前段时间折腾了一下hexo博客，部署了<a href="https://popwalker.github.io/">Github Pages</a>，设置了自己的<a href="https://changxuefeng.com/" target="_blank" rel="noopener">域名</a>转发，添加了https，仿佛万事具备，只差写博客了。然而发现博客配图还是个问题，因为markdown添加图片的时候，我想使用cdn，而不是本地图片。</p><p>于是考察了一些可以作为图床的云服务商，比如<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛</a>，<a href="https://sm.ms/" target="_blank" rel="noopener">sm.ms</a>，<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 。对比之后发现七牛不支持https，sm.ms完全免费，但功能似乎比较少，腾讯云的话有免费的几十G空间（具体多少我忘了）还提供https。嗯就用腾讯云吧。</p><a id="more"></a><p>图床选好了，那么上传图床的工具呢？都说iPic是个图床神器，最近还支持了腾讯云，不过需要付费。我需要的是一个免费版的，找了半天也没发现支持腾讯云的图床工具。作为一名coder，这怎么能忍？依稀记得好友的<a href="https://ultrarex.com/2017/09/12/use-Automator-upload-images-to-sm-ms-2/" target="_blank" rel="noopener">博客</a>中有写使用automator上传图片到sm.ms,于是我借鉴(copy)了一下，就有了本文。不同之处在于我这里使用的是腾讯云的<a href="https://cloud.tencent.com/document/product/436/12269" target="_blank" rel="noopener">python sdk</a>进行上传。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用automator上传图片的思路：</p><ul><li>点击本地图片，右键选择automator创建的服务</li><li>调用预先编写好的脚本进行上传</li><li>上传后将url写入剪贴板</li><li>在markdown编辑器中直接粘贴享用</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>打开automator，选择新建服务：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-221120@2x.png" alt=""></p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-221311@2x.png" alt=""></p><p>然后在“实用工具”中，找到“拷贝至剪切板”拖拽到右侧工作流程，这样，当我们选中图片的时候，就会将图片的本地路径设置到剪贴板中：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-221716@2x.png" alt=""></p><p>我们需要在这个创建服务的过程中进行实际测试，因此可以将“获得指定的访达(finder)项目”这个使用工具添加到右侧的工作流中，放在顶部，并添加几张图片作为测试用（后面需要再删除的），如下图：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-222121@2x.png" alt=""></p><p>然后点击右上角的运行按钮，运行完成后，查看自己的剪贴板内容，就会发现剪贴板内容正是图片的路径。</p><p>现在图片路径有了，再添加一个shell脚本的工作流，在脚本里面获取剪贴板里面的图片路径，然后进行上传，再将上传后的腾讯云的图片地址设置进剪贴板里，就行了。</p><p>将“运行shell脚本”这个工作流添加到右边，作为第三个工作流,并且选择python作为默认shell，如下图：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-223140@2x.png" alt=""></p><p>上图中的python代码所做的事情就是上传图片，并设置剪贴板内容，code如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosConfig</span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosS3Client</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传腾讯云需要的相关配置，可在这里查看：https://console.cloud.tencent.com/cam/capi</span></span><br><span class="line">secret_id = <span class="string">'your_cos_secret_id'</span> <span class="comment"># 此处填入腾讯云的secret_id，</span></span><br><span class="line">secret_key = <span class="string">'your_cos_secret_key'</span> <span class="comment"># 此处填入腾讯云的secret_key</span></span><br><span class="line">app_id = <span class="string">'your_app_id'</span> <span class="comment"># 此处填入app_id</span></span><br><span class="line">region = <span class="string">'your_region'</span> <span class="comment"># 此处填入对象存储的地区</span></span><br><span class="line">token = <span class="string">''</span>  <span class="comment"># 使用临时秘钥需要传入 Token，默认为空，可不填</span></span><br><span class="line">bucket_name = <span class="string">'your_bucket_name'</span></span><br><span class="line">bucket = bucket_name + <span class="string">'-'</span> + app_id  <span class="comment"># Bucket由bucketname-appid组成</span></span><br><span class="line">legal_extensions = [<span class="string">'.jpg'</span>, <span class="string">'.jpeg'</span>, <span class="string">'.png'</span>, <span class="string">'gif'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取剪贴板内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getClipboardData</span><span class="params">()</span>:</span></span><br><span class="line">    p = subprocess.Popen([<span class="string">'pbpaste'</span>], stdout=subprocess.PIPE)</span><br><span class="line">    retcode = p.wait()</span><br><span class="line">    data = p.stdout.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置剪贴板内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setClipboardData</span><span class="params">(data)</span>:</span></span><br><span class="line">    p = subprocess.Popen([<span class="string">'pbcopy'</span>], stdin=subprocess.PIPE)</span><br><span class="line">    p.stdin.write(data)</span><br><span class="line">    p.stdin.close()</span><br><span class="line">    retcode = p.wait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断扩展名是否合法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_image</span><span class="params">(path)</span>:</span></span><br><span class="line">    extension = os.path.splitext(path)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> extension <span class="keyword">in</span> legal_extensions:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传至腾讯云</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(file_name, filepath)</span>:</span></span><br><span class="line">    config = CosConfig(Appid=app_id, Secret_id=secret_id, Secret_key=secret_key, Region=region, Token=token)</span><br><span class="line">    <span class="comment"># 获取客户端对象</span></span><br><span class="line">    client = CosS3Client(config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        response = client.put_object(</span><br><span class="line">            Bucket=bucket,</span><br><span class="line">            Body=fp,</span><br><span class="line">            Key=file_name,</span><br><span class="line">            StorageClass=<span class="string">'STANDARD'</span>,</span><br><span class="line">            ContentType=<span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># print response</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    contents = getClipboardData().split(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    uploaded_url = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> contents:</span><br><span class="line">        <span class="keyword">if</span> validate_image(path):</span><br><span class="line">            file_name = os.path.basename(path)</span><br><span class="line">            upload(file_name, path)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 拼接成markdown的image链接格式</span></span><br><span class="line">            uploaded_url += <span class="string">'![]('</span> + <span class="string">'https://'</span> + bucket + <span class="string">'.cos.'</span> + region + <span class="string">'.myqcloud.com/'</span> + file_name + <span class="string">")\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将url设置到剪贴板中</span></span><br><span class="line">    setClipboardData(uploaded_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>代码量不多，其中上传函数<code>upload</code>的实现是使用的<a href="https://cloud.tencent.com/document/product/436/12269" target="_blank" rel="noopener">官方sdk</a>.如何安装sdk，以及更多使用方式，请参考官方文档</p><blockquote><p>tips: 这里运行的过程中不但可以单步调试，还可以查看程序输出，以便进行测试：</p></blockquote><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-230632@2x.png" alt=""></p><p>到这里上传功能已经实现了，如果再加一个上传完成后给个提示就更好了。</p><p>将“显示通知”这个工作流添加到右侧工作区，设置通知内容，然后执行，就会看到通知提示</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-224653@2x.png" alt=""></p><p>至此，功能已经实现，现在把第一个工作流“获取指定的finder项目”删除。保存这个服务，并取一个名字：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-225049@2x.png" alt=""></p><p>然后随便找一个图片，右键呼出菜单，就会看到我们刚创建的服务，不出意外，就可以正常使用了：</p><p><img src="https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/WX20180508-225335@2x.png" alt=""></p><p>如果下次再想对这个服务进行编辑的话，该去哪里找呢？其实这些自定义的服务是放在<code>~/Library/Services</code>路径下的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> ls ~/Library/Services</span><br><span class="line">上传至腾讯云.workflow</span><br></pre></td></tr></table></figure><p>到这里，这个上传图片的automator就算完成了。不足之处就是只能对磁盘上的图片文件进行操作。无法对截图进行操作。其实理论上只要能获取剪贴板的内容，截图上传也是可以实现的。</p><p>参考：</p><ul><li><a href="https://ultrarex.com/2017/09/12/use-Automator-upload-images-to-sm-ms-2/" target="_blank" rel="noopener">使用 Automator 上传图片到 sm.ms</a></li><li><a href="https://cloud.tencent.com/document/product/436/12269" target="_blank" rel="noopener">腾讯云对象存储python sdk 文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://my-bucket-1254096302.cos.ap-guangzhou.myqcloud.com/53967ec46e216.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;前段时间折腾了一下hexo博客，部署了&lt;a href=&quot;https://popwalker.github.io/&quot;&gt;Github Pages&lt;/a&gt;，设置了自己的&lt;a href=&quot;https://changxuefeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;域名&lt;/a&gt;转发，添加了https，仿佛万事具备，只差写博客了。然而发现博客配图还是个问题，因为markdown添加图片的时候，我想使用cdn，而不是本地图片。&lt;/p&gt;
&lt;p&gt;于是考察了一些可以作为图床的云服务商，比如&lt;a href=&quot;https://www.qiniu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;七牛&lt;/a&gt;，&lt;a href=&quot;https://sm.ms/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sm.ms&lt;/a&gt;，&lt;a href=&quot;https://cloud.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;腾讯云&lt;/a&gt; 。对比之后发现七牛不支持https，sm.ms完全免费，但功能似乎比较少，腾讯云的话有免费的几十G空间（具体多少我忘了）还提供https。嗯就用腾讯云吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="automator" scheme="https://popwalker.github.io/tags/automator/"/>
    
      <category term="腾讯云" scheme="https://popwalker.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="mac" scheme="https://popwalker.github.io/tags/mac/"/>
    
      <category term="python" scheme="https://popwalker.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用笔记</title>
    <link href="https://popwalker.github.io/article/d6ed9cc7/"/>
    <id>https://popwalker.github.io/article/d6ed9cc7/</id>
    <published>2018-04-25T01:56:14.000Z</published>
    <updated>2018-04-25T14:55:14.000Z</updated>
    
    <content type="html"><![CDATA[<center><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=432506345&auto=0&height=66"></iframe><br></center><h3 id="添加阅读次数统计"><a href="#添加阅读次数统计" class="headerlink" title="添加阅读次数统计"></a>添加阅读次数统计</h3><blockquote><p>参考next主题文档，使用leanCloud来统计</p></blockquote><p>1.注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>账号，获取<code>appId</code>和<code>appKey</code>,具体细节可以参考<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">这里</a></p><p>2.编辑<code>主题配置文件</code>，修改配项<code>leancloud_visitors</code></p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: &lt;your_app_id&gt;</span><br><span class="line">  app_key: &lt;your_app_key&gt;</span><br><span class="line">  security: true</span><br><span class="line">  betterPerformance: false</span><br></pre></td></tr></table></figure><p>然后重新部署hexo博客，列表页已经有了阅读次数，但是详情页报错：<code>阅读次数： Counter not initialized! See more at console err msg.</code><br>查看控制台报错，有两种方式解决：</p><ul><li>使用<code>hexo-leancloud-counter-security</code>插件</li><li>设置<code>leancloud_visitors.security = false</code></li></ul><p>我这里选择第二种。设置以后重新部署hexo，即可看到阅读次数的统计。 </p><h3 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h3><p>添加音乐很简单，只需要在markdown文件中加入iframe标签即可，示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=34578162&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要做的就是将上面链接中的id的值替换成目标歌曲的id即可，可以去网易云音乐搜索音乐，从链接中获取id。更多玩法参考<a href="http://frankorz.com/2016/09/30/Hexo-patch/#添加音乐" target="_blank" rel="noopener">这里</a></p><h3 id="开启图片点击预览"><a href="#开启图片点击预览" class="headerlink" title="开启图片点击预览"></a>开启图片点击预览</h3><p>1.NexT主题是支持图片预览的，使用的是<a href="http://fancyapps.com/fancybox/" target="_blank" rel="noopener">fancyBox</a>这个js库,要做的就是开启这个功能即可。</p><p>2.打开主题配置文件,找到<code>fancybox: false</code>这个配置项，修改为<code>true</code>即可。</p><p>参考：</p><ul><li><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官方文档</a></li><li><a href="http://frankorz.com/2016/09/30/Hexo-patch" target="_blank" rel="noopener">Hexo 博客补丁</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;https://music.163.com/outchain/player?type=2&amp;id=432506345&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/center&gt;




&lt;h3 id=&quot;添加阅读次数统计&quot;&gt;&lt;a href=&quot;#添加阅读次数统计&quot; class=&quot;headerlink&quot; title=&quot;添加阅读次数统计&quot;&gt;&lt;/a&gt;添加阅读次数统计&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考next主题文档，使用leanCloud来统计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.注册&lt;a href=&quot;https://leancloud.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leancloud&lt;/a&gt;账号，获取&lt;code&gt;appId&lt;/code&gt;和&lt;code&gt;appKey&lt;/code&gt;,具体细节可以参考&lt;a href=&quot;https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.编辑&lt;code&gt;主题配置文件&lt;/code&gt;，修改配项&lt;code&gt;leancloud_visitors&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://popwalker.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
