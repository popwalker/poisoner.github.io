<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用automator上传图片到腾讯云]]></title>
    <url>%2Farticle%2F38b3f2da%2F</url>
    <content type="text"><![CDATA[背景前段时间折腾了一下hexo博客，部署了Github Pages，设置了自己的域名转发，添加了https，仿佛完事具备，只差写博客了。然而发现博客配图还是个问题，因为markdown添加图片的时候，我想使用cdn，而不是本地图片。 于是考察了一些可以作为图床的云服务商，比如七牛，sm.ms，腾讯云 。对比之后发现七牛不支持https，sm.ms完全免费，但功能似乎比较少，腾讯云的话有免费的几十G空间（具体多少我忘了）还提供https。嗯就用腾讯云吧。 图床选好了，那么上传图床的工具呢？都说iPic是个图床神器，最近还支持了腾讯云，不过需要付费。我需要的是一个免费版的，找了半天也没发现支持腾讯云的图床工具。作为一名coder，这怎么能忍？依稀记得好友的博客中有写使用automator上传图片到sm.ms,于是我借鉴(copy)了一下，就有了本文。不同之处在于我这里使用的是腾讯云的python sdk进行上传。 思路使用automator上传图片的思路： 点击本地图片，右键选择automator创建的服务 调用预先编写好的脚本进行上传 上传后将url写入剪贴板 在markdown编辑器中直接粘贴享用 实现步骤打开automator，选择新建服务： 然后在“实用工具”中，找到“拷贝至剪切板”拖拽到右侧工作流程，这样，当我们选中图片的时候，就会将图片的本地路径设置到剪贴板中： 我们需要在这个创建服务的过程中进行实际测试，因此可以将“获得指定的访达(finder)项目”这个使用工具添加到右侧的工作流中，放在顶部，并添加几张图片作为测试用（后面需要再删除的），如下图： 然后点击右上角的运行按钮，运行完成后，查看自己的剪贴板内容，就会发现剪贴板内容正是图片的路径。 现在图片路径有了，再添加一个shell脚本的工作流，在脚本里面获取剪贴板里面的图片路径，然后进行上传，再将上传后的腾讯云的图片地址设置进剪贴板里，就行了。 将“运行shell脚本”这个工作流添加到右边，作为第三个工作流,并且选择python作为默认shell，如下图： 上图中的python代码所做的事情就是上传图片，并设置剪贴板内容，code如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# -*- coding=utf-8from qcloud_cos import CosConfigfrom qcloud_cos import CosS3Clientimport osimport subprocess# 上传腾讯云需要的相关配置，可在这里查看：https://console.cloud.tencent.com/cam/capisecret_id = 'your_cos_secret_id' # 此处填入腾讯云的secret_id，secret_key = 'your_cos_secret_key' # 此处填入腾讯云的secret_keyapp_id = 'your_app_id' # 此处填入app_idregion = 'your_region' # 此处填入对象存储的地区token = '' # 使用临时秘钥需要传入 Token，默认为空，可不填bucket_name = 'your_bucket_name'bucket = bucket_name + '-' + app_id # Bucket由bucketname-appid组成legal_extensions = ['.jpg', '.jpeg', '.png', 'gif']# 获取剪贴板内容def getClipboardData(): p = subprocess.Popen(['pbpaste'], stdout=subprocess.PIPE) retcode = p.wait() data = p.stdout.read() return data# 设置剪贴板内容def setClipboardData(data): p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE) p.stdin.write(data) p.stdin.close() retcode = p.wait()# 判断扩展名是否合法def validate_image(path): extension = os.path.splitext(path)[1] if extension in legal_extensions: return True else: return False# 上传至腾讯云def upload(file_name, filepath): config = CosConfig(Appid=app_id, Secret_id=secret_id, Secret_key=secret_key, Region=region, Token=token) # 获取客户端对象 client = CosS3Client(config) with open(filepath, 'rb') as fp: response = client.put_object( Bucket=bucket, Body=fp, Key=file_name, StorageClass='STANDARD', ContentType='text/html; charset=utf-8' ) # print responsedef main(): contents = getClipboardData().split("\n") uploaded_url = "" for path in contents: if validate_image(path): file_name = os.path.basename(path) upload(file_name, path) # 拼接成markdown的image链接格式 uploaded_url += '![](' + 'https://' + bucket + '.cos.' + region + '.myqcloud.com/' + file_name + ")\n" # 将url设置到剪贴板中 setClipboardData(uploaded_url)main() 代码量不多，其中上传函数upload的实现是使用的官方sdk.如何安装sdk，以及更多使用方式，请参考官方文档 tips: 这里运行的过程中不但可以单步调试，还可以查看程序输出，以便进行测试： 到这里上传功能已经实现了，如果再加一个上传完成后给个提示就更好了。 将“显示通知”这个工作流添加到右侧工作区，设置通知内容，然后执行，就会看到通知提示 至此，功能已经实现，现在把第一个工作流“获取指定的finder项目”删除。保存这个服务，并取一个名字： 然后随便找一个图片，右键呼出菜单，就会看到我们刚创建的服务，不出意外，就可以正常使用了： 如果下次再想对这个服务进行编辑的话，该去哪里找呢？其实这些自定义的服务是放在~/Library/Services路径下的: 12&gt; ls ~/Library/Services上传至腾讯云.workflow 到这里，这个上传图片的automator就算完成了。不足之处就是只能对磁盘上的图片文件进行操作。无法对截图进行操作。其实理论上只要能获取剪贴板的内容，截图上传也是可以实现的。 参考： 使用 Automator 上传图片到 sm.ms 腾讯云对象存储python sdk 文档]]></content>
      <tags>
        <tag>automator</tag>
        <tag>腾讯云</tag>
        <tag>mac</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo使用笔记]]></title>
    <url>%2Farticle%2Fd6ed9cc7%2F</url>
    <content type="text"><![CDATA[添加阅读次数统计 参考next主题文档，使用leanCloud来统计 1.注册leancloud账号，获取appId和appKey,具体细节可以参考这里 2.编辑主题配置文件，修改配项leancloud_visitors 123456leancloud_visitors: enable: true app_id: &lt;your_app_id&gt; app_key: &lt;your_app_key&gt; security: true betterPerformance: false 然后重新部署hexo博客，列表页已经有了阅读次数，但是详情页报错：阅读次数： Counter not initialized! See more at console err msg.查看控制台报错，有两种方式解决： 使用hexo-leancloud-counter-security插件 设置leancloud_visitors.security = false 我这里选择第二种。设置以后重新部署hexo，即可看到阅读次数的统计。 添加音乐添加音乐很简单，只需要在markdown文件中加入iframe标签即可，示例： 1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&amp;id=34578162&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt; 然后需要做的就是将上面链接中的id的值替换成目标歌曲的id即可，可以去网易云音乐搜索音乐，从链接中获取id。更多玩法参考这里 参考： 为NexT主题添加文章阅读量统计功能 NexT官方文档 Hexo 博客补丁]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
